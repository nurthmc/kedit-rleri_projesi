# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mNxDRNdT86SAmhgF3kxmcdYtW6OdHOFp
"""

!pip uninstall tensorflow

!pip install tensorflow==2.15.0

import tensorflow as tf
print(tf)

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

from google.colab import drive

drive.mount('/content/drive')

train_datagen= ImageDataGenerator(rescale=1./255,
                                  shear_range =0.2,
                                  zoom_range =0.2,
                                  horizontal_flip= True)
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/valid',
                                                target_size=(64, 64),
                                                batch_size=32,
                                                class_mode='categorical')

test_datagen= ImageDataGenerator(rescale=1./255)
test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/train',
                                                target_size=(64, 64),
                                                batch_size=32,
                                                class_mode='categorical')

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64,64,3]))

cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

cnn.add(tf.keras.layers.Dense(units=5, activation='softmax'))

cnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])

cnn.fit(x=training_set, validation_data=test_set, epochs=50)

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('/content/drive/MyDrive/testtcatss/fivecats2.jpeg', target_size=(64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = cnn.predict(test_image)
class_indices = training_set.class_indices
class_labels = {v: k for k, v in class_indices.items()}
predicted_class_index = np.argmax(result)
predicted_class_label = class_labels[predicted_class_index]

print(f"The predicted class is: {predicted_class_label}")